package kuangshenjava_shejimoshi_23zhong.jianzaozhemoshi;

/**
 * 创建者模式
 *
 * 创建者模式也属于创建型模式，它提供了一种创建对象的最佳方式
 *
 * 定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
 * 主要作用：在用户不知道对象的构造过程和细节的情况下就可以直接创建复杂的对象
 *
 * 用户只需要给出指定复杂对象的类型和内容，构造者模式负责按顺序创建复杂对象（把内部的构造过程和细节隐藏起来）
 *
 * 例子：
 * 1、工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）
 * 2、汽车购买者（用户）：你只需要说出你需要的型号（对象的类型和内容），然后直接购买就可以使用了（不再需要知道汽车是怎么组装的（车轮、车门等等））
 */

/**
 * 例子示例的是Builder模式的常规用法，导演类diretor在Builder模式中具有很重要的作用，它用于知道具有构造者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把director和抽象建造者进行结合
 *
 * 通过静态内部类方式实现零件无序装配构造，这种方法使用更加灵活，更符合定义。内部有复杂对象的默认实现，使用时可以根据用户需求定义更改内容，并且无需改变具体的构造方式。就可以生产出不同复杂产品
 *
 * 比如：麦当劳的套餐，服务员（具体构造者）可以随意搭配任意几种产品（零件）组成一款套餐（产品），然后出售给客户，比第一种方式少了指挥者，主要是因为第二种方式把指挥者交给用户来操作，使得产品的创建更加简单灵活
 */

/**
 * 优点：
 * 1、产品的建造和表示分离，实现了解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节
 * 2、将复杂产品的创建分解在不同的方法中，使得创建过程更加清晰
 * 3、具体的建造者类之间是相互独立的，这有利于系统的扩展。增加具体建造者无需修改原有类库的代码，符合”开闭原则“
 * 缺点：
 * 1、建造者模式所创建的产品一般具有较多的共同点，其组成不扽相似；如果产品之间的差异性很很大，则不适合使用建造者模式，一次其使用范围搜到一定的限制
 * 2、如果产品的内部变化复杂，可能会导致需要定义很多具体建造者模式来实现这种变化，导致系统变得很庞大
 */

/**
 * 应用场景：
 * 1、需要生成的产品对象有复杂的内部结构，这些产品对象具备共性
 * 2、隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品
 * 3、适合于一个具有较多的零件（属性）的产品（对象）的创建过程
 * 建造者模式与抽象工厂模式的比较
 * 1、与抽象工厂模式相比，建造者模式返回一个组装好的完整产品，二抽象工厂模式返回一系列相关的产品，这些产品位于不同等级结构，构成了一个产品族
 * 2、在抽象工厂模式中，客户端实例化工厂类，然后调用工厂方法获取所需产品，而在建造者模式中，客户端可以不直接调用建造者的相关方法，而是通过指挥者类来指导如何生成对象，包括对象的组装过程和建造步骤，它侧重于一步步构造一个复杂对象，返回一个完整的对象
 * 3、如果抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车
 */

public class jianzaozhemoshi {
}