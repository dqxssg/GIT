package kuangshenjava_shejimoshi_23zhong.gongchangmoshi;

/**
 * 单例模式
 * 核心作用：保证一个类只有一个实列，并且提供一个访问该实例的全局访问点
 * 常见场景：
 * Windows的任务管理器
 * Windows的回收站
 * 项目中，读取配置文件的类，一般也只有一个对象，没必要每次哦都去new对象读取
 * 网站的计数器一般也会采用单例模式，也可以保证同步
 * 数据库连接池的设计一般也是单例模式
 * 再Serviet编程中，每个Serviet也是单例模式的
 * 再Spring中，每个spring默认就是单例的
 * 等等
 */


/**
 * 工厂模式
 * 作用：
 * 1、实现了创建者和调用者的分离
 * 分类
 * 1、简单工厂模式
 * 2、工厂方法模式
 * 3、抽象工厂模式
 *核心本质
 * 1、实例化对象不使用new，用工厂方法代替
 * 2、将选择实现类，创建对象统一管理和控制。从而将调用者跟我们的实现类解耦
 * 三种模式
 * 1、简单工厂模式：用来生产同一等级结构中的任意产品（对于增加新的产品，需要扩展已有代码）
 * 2、工厂方法模式：用来生产同一等级结构中的固定产品（支持增加任意产品）
 * 3、抽象工厂模式：围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂
 *
 *
 * OOP七大原则
 * 开闭原则：对扩展开放，对修改关闭
 * 依赖倒转原则：要针对接口编程，不要针对实现编程
 * 迪米特法则：只与你的朋友通信，而避免和“陌生人”通信
 *
 */

/**
 * 工厂模式应用场景：
 * 1、JDK中Calendar的getLnstance方法
 * 2、JDBC中的Connection对象的获取
 * 3、Spring中的IOC容器创建管理bean对象
 * 4、反射Class对象的newwLnstance方法
 */

/**
 * 结构复杂程度：jiandan
 * 代码复杂程度：jiandan
 * 编程复杂程度：jiandan
 * 管理复杂程度：jiandan
 *
 * 根据设计原则：工厂方法模式
 * 根据实际业务：简单工厂模式
 */
public class gongchangmoshi {
}
